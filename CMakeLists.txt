PROJECT(openvideo)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true) # Avoid unneccesary code
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

FILE(TO_CMAKE_PATH "$ENV{ICG_CMAKE_MODULE_PATH}" OT_CMAKE_MODULE_PATH)
SET(CMAKE_MODULE_PATH ${OT_CMAKE_MODULE_PATH})

# specify the lib and dll output folders for win32
IF(WIN32)
   SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${openvideo_SOURCE_DIR}/bin/win32)
   SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${openvideo_SOURCE_DIR}/lib/win32)
   SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${openvideo_SOURCE_DIR}/lib/win32)
ENDIF(WIN32)

IF(UNIX)
   INCLUDE(UsePkgConfig)
ENDIF(UNIX)

FIND_PACKAGE(ACE REQUIRED)
FIND_PACKAGE(TinyXMLMod REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)

IF(WIN32)
   ## this is necessary for FindGLUT to work correctly under win32
   #SET(GLUT_ROOT_PATH $ENV{GLUT_ROOT_PATH}) -> only for original FindGLUT!
   FIND_PACKAGE(GLUT_ICG) # use the ICG own FindGLUT version
ELSE(WIN32)
   FIND_PACKAGE(GLUT)   
ENDIF(WIN32)
IF(GLUT_FOUND)
   OPTION(OT_USE_GLUT "Build with GLUT support?" ON)
ELSE(GLUT_FOUND)
   OPTION(OT_USE_GLUT "Build with GLUT support?" OFF)
ENDIF(GLUT_FOUND)

IF(WIN32)
   #FIND_PACKAGE(DSVL)
   IF(DSVL_FOUND)
      OPTION(OT_USE_DSVL "Build with Windows DirectShow Video Library support?" ON)
   ELSE(DSVL_FOUND)
      OPTION(OT_USE_DSVL "Build with Windows DirectShow Video Library support?" OFF)
   ENDIF(DSVL_FOUND)
ENDIF(WIN32)

FIND_PACKAGE(OpenCV)
IF(OpenCV_FOUND)
   OPTION(OT_USE_OPENCV "Build with OpenCV support?" ON)
ELSE(OpenCV_FOUND)
   OPTION(OT_USE_OPENCV "Build with OpenCV support?" OFF)
ENDIF(OpenCV_FOUND)

FIND_PACKAGE(AVIFile64)
IF(AVIFILE_FOUND)
   IF(UNIX)
      OPTION(OT_USE_AVIFILE64 "Build with AVIFile64 support (not on Windows!)" ON)
   ELSE(UNIX)
      OPTION(OT_USE_AVIFILE64 "Build with AVIFile64 support (not on Windows!)" OFF)
   ENDIF(UNIX)
ELSE(AVIFILE_FOUND)
   OPTION(OT_USE_AVIFILE64 "Build with AVIFile64 support (not on Windows!)" OFF)
ENDIF(AVIFILE_FOUND)


IF(UNIX)
  ADD_DEFINITIONS(-DLINUX)
ENDIF(UNIX)

SET(CPACK_GENERATOR "TBZ2")
SET(CPACK_SOURCE_GENERATOR "TBZ2")
SET(CPACK_PACKAGE_VERSION_MAJOR "1")
SET(CPACK_PACKAGE_VERSION_MINOR "0")
SET(CPACK_PACKAGE_VERSION_PATCH "0")
SET(CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_NAME "openvideo")

# RPM variables:
IF(NOT CMAKE_INSTALL_BINDIR)
SET(CMAKE_INSTALL_BINDIR ${CMAKE_INSTALL_PREFIX}/bin)
ENDIF(NOT CMAKE_INSTALL_BINDIR)
IF(NOT CMAKE_INSTALL_LIBDIR)
SET(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib)
ENDIF(NOT CMAKE_INSTALL_LIBDIR)
IF(NOT CMAKE_INSTALL_DATADIR)
SET(CMAKE_INSTALL_DATADIR ${CMAKE_INSTALL_PREFIX}/share)
ENDIF(NOT CMAKE_INSTALL_DATADIR)
IF(NOT CMAKE_INSTALL_DOCDIR)
SET(CMAKE_INSTALL_DOCDIR ${CMAKE_INSTALL_DATADIR}/doc/packages)
ENDIF(NOT CMAKE_INSTALL_DOCDIR)
IF(NOT CMAKE_INSTALL_MANDIR)
SET(CMAKE_INSTALL_MANDIR ${CMAKE_INSTALL_DATADIR}/man)
ENDIF(NOT CMAKE_INSTALL_MANDIR)

IF(UNIX)
   # configure openvideo.pc:
   SET(OPENVIDEO_PREFIX ${CMAKE_INSTALL_PREFIX})
   SET(OPENVIDEO_LIBDIR ${CMAKE_INSTALL_LIBDIR})
   SET(OPENVIDEO_PROJECT_NAME ${CPACK_PACKAGE_NAME})
   SET(OPENVIDEO_PROJECT_VERSION ${CPACK_PACKAGE_VERSION})
   SET(OPENVIDEO_PROJECT_DESCRIPTION "Support for video data")
   SET(OPENVIDEO_PROJECT_LIBNAME ${CPACK_PACKAGE_NAME})
   SET(OPENVIDEO_PROJECT_DEFINES "")
   
   CONFIGURE_FILE(openvideo.pc.in openvideo.pc @ONLY)
   INSTALL(FILES ${CMAKE_BINARY_DIR}/openvideo.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
   CONFIGURE_FILE(openvideo.spec.in openvideo.spec)
ENDIF(UNIX)

#INCLUDE_DIRECTORIES(include ${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIR})

IF(WIN32)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
   ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_DEPRECATE)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE_GLOBALS)
   SET(CMAKE_DEBUG_POSTFIX "d")
ENDIF(WIN32)


# ACE
INCLUDE_DIRECTORIES(${ACE_INCLUDE_DIR})
LINK_DIRECTORIES(${ACE_LIBRARY_DIR})

# TinyXMLMod
INCLUDE_DIRECTORIES(${TINY_XML_MOD_INCLUDE_DIR})
LINK_DIRECTORIES(${TINY_XML_MOD_LIBRARY_DIR})
ADD_DEFINITIONS(${TINY_XML_MOD_DEFINITIONS})

# GLUT
IF(OT_USE_GLUT)
   INCLUDE_DIRECTORIES(${GLUT_INCLUDE_DIR})
ENDIF(OT_USE_GLUT)

# OpenCV
IF(OT_USE_OPENCV)
   INCLUDE_DIRECTORIES(${OPENCV_INCLUDE_DIRS})
   LINK_DIRECTORIES(${OpenCV_LINK_DIRECTORIES})
ENDIF(OT_USE_OPENCV)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(standalone)

INSTALL(DIRECTORY include DESTINATION ${CMAKE_INSTALL_PREFIX} PATTERN ".svn" EXCLUDE)

#IF(UNIX)
#  INSTALL(FILES FindOpenVideo.cmake DESTINATION /usr/share/cmake/Modules)
#ENDIF(UNIX)

#IF(WIN32)
#  INSTALL(FILES FindOpenVideo.cmake DESTINATION $ENV{CMAKE_MODULE_PATH})
#ENDIF(WIN32)

# packaging:

SET(CPACK_IGNORE_FILES
  ".depend"
  ".scon*"
  "SCons*"
  "/#.*#$"
  "/log"
  "/trunk/build/"
  "CMakeCache\\\\.txt"
  "CMakeFiles"
  "CPack.*Config\\\\.cmake"
  "CVS"
  "Makefile"
  "\\\\.#"
  "\\\\.a$"
  "\\\\.aux$"
  "\\\\.bz2$"
  "\\\\.dsp$"
  "\\\\.dvi$"
  "\\\\.eps$"
  "\\\\.gz$"
  "\\\\.iv$"
  "\\\\.log$"
  "\\\\.o$"
  "\\\\.out"
  "\\\\.pgm$"
  "\\\\.pro$"
  "\\\\.ps$"
  "\\\\.save"
  "\\\\.so"
  "\\\\.svn"
  "\\\\.swp$"
  "\\\\.tbz$"
  "\\\\.tex$"
  "\\\\.tgz$"
  "\\\\.vcproj$"
  "^/box.cpp"
  "_CPack_Packages"
  "a.out"
  "cgparams$"
  "cmake_install.cmake"
  "cvs_import"
  "pkgconfig"
  "install.sh"
  "install_manifest.txt"
  "makedist.sh"
  "moc_"
  "progress.make"
  "~$"
)

SET(CPACK_SOURCE_IGNORE_FILES ${CPACK_IGNORE_FILES})
SET(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION})
INCLUDE(CPack)
ADD_CUSTOM_TARGET(dist COMMAND make clean && make package_source)
ADD_CUSTOM_TARGET(clean-all COMMAND find \\\( -name CMakeFiles -or -name CMakeCache.txt -or -name Makefile -or -name '*.cmake' -or -name _CPack_Packages -or -name '*~' \\\) -prune -exec rm -rf {} '\;')
